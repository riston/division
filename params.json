{"name":"division","tagline":"Simple and powerful wrapper over node.js cluster API","body":"division [![](https://travis-ci.org/codename-/division.png)](https://travis-ci.org/codename-/division)\r\n========\r\n\r\nSimple and powerful wrapper over [node.js](http://nodejs.org/) [cluster](http://nodejs.org/api/cluster.html) API.  \r\nThis module is inspired by impressive but abandoned project [Cluster](https://github.com/LearnBoost/cluster) created by [@visionmedia](https://github.com/visionmedia).\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install division\r\n```\r\n#### Running Tests\r\n\r\nFirst go to module directory and install development dependencies:\r\n\r\n```bash\r\n$ npm install\r\n```\r\n\r\nThen you can test module typing:\r\n\r\n```bash\r\n$ npm test\r\n```\r\n\r\n## Features\r\n\r\nThe most valuable feature: you don't need to change your code to working within cluster.\r\n\r\nOther features:\r\n *  standalone (without 3rd-party dependencies)\r\n *  zero-downtime restart\r\n *  maintains worker count\r\n *  forceful shutdown support\r\n *  graceful shutdown support\r\n *  bundled extensions\r\n    *  debug: enable verbose debugging informations\r\n    *  watch: reload cluster when files was changed\r\n    *  signals: add ability to control cluster with POSIX signals\r\n\r\n## Example\r\n\r\nMore examples you can find in `examples` directory.\r\n\r\n### Standard configuration example\r\n\r\n```javascript\r\nvar division = require('division');\r\nvar cluster = new division();\r\n\r\n// Configuration for development environment\r\ncluster.configure('development', function () {\r\n  // Put your development configuration here\r\n  cluster.set('args', ['--some-process-args', 'send-to-workers']);\r\n});\r\n\r\n// Configuration for production environment\r\ncluster.configure('production', function () {\r\n  // Put your production configuration here\r\n  cluster.enable('silent');\r\n});\r\n\r\n// Configuration for all environments\r\n// TIP: this is pointing to cluster\r\ncluster.configure(function () {\r\n  this.set('path', 'app.js');\r\n});\r\n\r\n// You can also set settings without configuration block\r\ncluster.set('size', 2);\r\n\r\n// Use extensions\r\n// TIP: You can chain (almost) all methods\r\ncluster.use('debug').use('signals');\r\n\r\n// Start your application as a cluster!\r\ncluster.run(function () {\r\n  // `this` is pointing to the Master instance\r\n});\r\n```\r\n\r\nYou can set environment while launching application - in this way:\r\n\r\n```bash\r\n$ NODE_ENV=production node cluster.js\r\n```\r\n\r\n### Minimal configuration example\r\n\r\n```javascript\r\nvar division = require('division');\r\nvar cluster = new division();\r\n\r\n// You can chain methods\r\ncluster.set('path', 'app.js').run();\r\n```\r\n\r\n## API Reference\r\n\r\n### Division class\r\n\r\n#### Attributes\r\n\r\n###### version\r\n\r\n###### environment\r\n\r\n###### settings\r\n\r\n#### Methods\r\n\r\n###### configure\r\n\r\n###### set\r\n\r\n###### get\r\n\r\n###### use\r\n\r\n###### enable\r\n\r\n###### disable\r\n\r\n###### enabled\r\n\r\n###### disabled\r\n\r\n###### run\r\n\r\n### Master class\r\n\r\n` Master ` is returned when you call ` run ` method from ` Division ` and it is also set as a scope for callback function of this method.\r\n\r\n#### Attributes\r\n\r\n` Master ` provide these public attributes\r\n\r\n###### pid\r\n\r\n###### startup\r\n\r\n#### Methods\r\n\r\n` Master ` provide these public methods\r\n\r\n###### addSignalListener\r\n\r\n###### increase\r\n\r\n###### decrease\r\n\r\n###### restart\r\n\r\n###### close\r\n\r\n###### destroy\r\n\r\n###### kill\r\n\r\n###### maintenance\r\n\r\n###### publish\r\n\r\n###### broadcast\r\n\r\n#### Events\r\n\r\n` Master ` inherit his prototype from `EventEmitter` and emit these events\r\n\r\n###### error\r\n\r\n###### increase\r\n\r\n###### decrease\r\n\r\n###### restart\r\n\r\n###### close\r\n\r\n###### destroy\r\n\r\n###### fork\r\n\r\n###### online\r\n\r\n###### listening\r\n\r\n###### disconnect\r\n\r\n###### exit\r\n\r\n### Worker class\r\n\r\n` Worker ` is returned in some of ` Master ` events\r\n\r\n#### Attributes\r\n\r\n` Worker ` provide these public attributes\r\n\r\n###### id\r\n\r\n###### pid\r\n\r\n###### startup\r\n\r\n###### status\r\n\r\n#### Methods\r\n\r\n` Worker ` provide these public methods\r\n\r\n###### close\r\n\r\n###### kill\r\n\r\n###### publish\r\n\r\n#### Events\r\n\r\n` Worker ` inherit his prototype from `EventEmitter` and emit these events\r\n\r\n###### close\r\n\r\n###### kill\r\n\r\n###### publish\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}